minimum_cumulusci_version: '3.34.0'
project:
    name: SummitEventsApp
    package:
        name: Summit Events App
        namespace: summit
        api_version: "61.0"
    source_format: sfdx
    git:
        default_branch: master
        repo_url: https://github.com/SFDO-Community/Summit-Events-App

tasks:
    deploy_site_config:
        description: Deploys configuration for Development.
        class_path: cumulusci.tasks.salesforce.Deploy
        options:
            namespace_inject: $project_config.project__package__namespace
            path: unpackaged/config/site

    create_fake_school_data:
        description: Makes fake account data to mimic schools with Education as industry
        class_path: cumulusci.tasks.bulkdata.snowfakery.Snowfakery
        options:
            recipe: datasets/snowfakery/school_recipe.yml

    deploy_guest_sharing_rules:
        description: Deploys configuration for Development.
        class_path: cumulusci.tasks.salesforce.Deploy
        options:
            namespace_inject: $project_config.project__package__namespace
            path: unpackaged/config/sharing

    deploy_namespaced_guest_sharing_rules:
        description: Deploys configuration for Development.
        class_path: cumulusci.tasks.salesforce.Deploy
        options:
            namespace_inject: $project_config.project__package__namespace
            path: unpackaged/config/summit__sharing

    deploy_site_settings:
        description: Setup the Custom Settings for the Event Site
        class_path: cumulusci.tasks.apex.anon.AnonymousApexTask
        options:
            namespace_inject: $project_config.project__package__namespace
            apex: >
                Site mySite = [SELECT Id FROM Site WHERE Name = 'Summit_Events'];
                SiteDetail mySiteDetail = [SELECT SecureURL FROM SiteDetail WHERE DurableId = :mySite.Id];
                String url = mySiteDetail.SecureURL;
                %%%NAMESPACE%%%Summit_Events_Settings__c eventSettings = %%%NAMESPACE%%%Summit_Events_Settings__c.getOrgDefaults();
                eventSettings.%%%NAMESPACE%%%Community_Base_URL__c = url;
                eventSettings.%%%NAMESPACE%%%Managed_Package__c = false;
                upsert eventSettings;

    deploy_permission_set:
        description: Give System Admins Event Admin Permission Set
        class_path: cumulusci.tasks.apex.anon.AnonymousApexTask
        options:
            namespace_inject: $project_config.project__package__namespace
            apex: >
                List<PermissionSet> eventPermissionSets;
                eventPermissionSets = [SELECT Name, Id FROM PermissionSet WHERE Name = 'Summit_Events_Admin'];

                List<PermissionSetAssignment> permissionSetList = new List<PermissionSetAssignment>();
                if (!eventPermissionSets.isEmpty()) {
                    for (User u: [ SELECT ID FROM User WHERE Profile.Name = 'System Administrator' ]) {
                                     permissionSetList.add(new PermissionSetAssignment(PermissionSetId = eventPermissionSets[0].Id, AssigneeId = u.Id));
                    }
                }
                if (!permissionSetList.isEmpty()) {
                    upsert permissionSetList;
                }

    deploy_guest_permission_set:
        description: Give System Admins Event Admin Permission Set
        class_path: cumulusci.tasks.apex.anon.AnonymousApexTask
        options:
            namespace_inject: $project_config.project__package__namespace
            apex: >
                String siteName = 'Summit_Events';

                Site site = [
                        SELECT GuestUserId
                        FROM Site
                        WHERE Name = :siteName
                ];

                List<PermissionSet> eventPermissionSets;
                eventPermissionSets = [SELECT Name, Id FROM PermissionSet WHERE Name = 'Summit_Events_Registrant'];

                List<PermissionSetAssignment> permissionSetList = new List<PermissionSetAssignment>();
                if (!eventPermissionSets.isEmpty()) {
                        permissionSetList.add(new PermissionSetAssignment(PermissionSetId = eventPermissionSets[0].Id, AssigneeId = site.GuestUserId));
                }
                if (!permissionSetList.isEmpty()) {
                    upsert permissionSetList;
                }

    robot:
        options:
            suites: robot/SummitEventsApp/tests
            options:
                outputdir: robot/SummitEventsApp/results

    robot_testdoc:
        options:
            path: robot/SummitEventsApp/tests
            output: robot/SummitEventsApp/doc/SummitEventsApp_tests.html

    install_managed:
        options:
            security_type: NONE

    update_dependencies:
        options:
            security_type: NONE

flows:
    config_qa:
        steps:
            3:
                task: deploy_permission_set
            4:
                task: deploy_site_config
            5:
                task: deploy_site_settings
            6:
                task: deploy_guest_permission_set
            7:
                task: deploy_guest_sharing_rules
            8:
                task: create_fake_school_data

    config_dev:
        steps:
            3:
                task: deploy_permission_set
            4:
                task: deploy_site_config
            5:
                task: deploy_site_settings
            6:
                task: deploy_guest_permission_set
            7:
                task: deploy_guest_sharing_rules
            8:
                task: create_fake_school_data

    config_dev_namespaced:
        steps:
            3:
                task: deploy_permission_set
            4:
                task: deploy_site_config
            5:
                task: deploy_site_settings
            6:
                task: deploy_guest_permission_set
            7:
                task: deploy_guest_sharing_rules
            8:
                task: create_fake_school_data

    customer_org:
        steps:
            1:
                task: install_managed

plans:
    install:
        slug: install
        title: Base Plan
        tier: primary
        is_listed: True
        preflight_message: This will install Summit Events App (SEA) into your org.
        post_install_message: "Thanks for installing SEA. Please review the [post-install instructions](https://sfdo-community-sprints.github.io/summit-events-app-documentation/docs/Getting-Started/Installing/) for next steps."
        error_message: "If you experience an issue with the installation, please post in the [Trailblazer Community](https://trailhead.salesforce.com/trailblazer-community/groups/0F94S000000kHi2SAE)."
        steps:
            1:
                flow: customer_org

orgs:
    scratch:
        dev_namespaced:
            config_file: orgs/dev.json
            days: 7
            namespaced: true